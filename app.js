const TelegramAPI = require('node-telegram-bot-api')

require('dotenv').config();

const mongoose = require('mongoose') // –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MongoDB
const User = require('./models/users') // –µ–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const keyboard =  require ('./module/keyboard')
const messageText =  require ('./module/text.js');

require('dotenv').config();

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å.
mongoose
    .connect(process.env.TOKENBD, {useNewUrlParser: true, useUnifiedTopology: true}) 
    .then((res) => console.log('Connection to DataBase...'))
    .catch( err => console.log(err));

const bot = new TelegramAPI(process.env.TOKEN, { polling: true})
const adm = new TelegramAPI(process.env.TOKEN2, { polling: true})

const linkCheck = `@bkfocus`

bot.onText(/\/start/, async msg => {
    // console.log(msg)
    const Name = msg.from.first_name;
    const UserName = msg.from.username;
    const ChatId = msg.chat.id;
    const UserId = msg.from.id;

    const info = await bot.getChatMember(linkCheck, ChatId)

    if (info.status != 'left') {
        
        const users = new User({ChatId, UserName, Name});
        users
            .save()
            .then(res => console.log('very good!'))
            .catch(err => console.log(err))

        bot.sendMessage(ChatId, messageText.start, {
            parse_mode: "HTML",
            reply_markup: {
                keyboard: keyboard.start
            }
        })

    } else {
        bot.sendMessage(ChatId, messageText.check, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: keyboard.check
            }
        })
    }
})

bot.on('message', async msg => {

    const ChatId = msg.chat.id;
    const UserName = msg.from.username;
    const UserId = msg.from.id;
    const Name = msg.from.first_name;
    const info = await bot.getChatMember(linkCheck, ChatId)

    if (info.status != 'left') {

        switch(msg.text) { 

            case '‚ù§Ô∏è–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
                bot.sendMessage(ChatId, messageText.productList, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: keyboard.productList
                    }
                })
                break
            
            case 'üë§–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç': 
                bot.sendMessage(ChatId, `üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\n\n–ú–æ–π ID: <strong>${UserId}</strong>`, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: keyboard.profile
                    }
                })
                break
            
            case 'üî•–°–∞–π—Ç –¥–ª—è —Å–µ–∫—Å-–∑–Ω–∞–∫–æ–º—Å—Ç–≤üî•':
                bot.sendMessage(ChatId, messageText.website, {
                    parse_mode: "HTML",
                })
                break
        }

    } else if(msg.text != '/start') {
        bot.sendMessage(ChatId, messageText.check, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: keyboard.check
            }
        })
    }
    
})


bot.on('callback_query', async query => {

    const ChatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const textPrice = messageText.titleProduct;

    const info = await bot.getChatMember(linkCheck, ChatId)

    if (info.status != 'left') {

            switch(query.data){
                case '99':
                    price(textPrice.price99, messageText.product, ChatId, messageId, 'qiwi.com/n/CRITE671')
                    break
                case '149':
                    price(textPrice.price149, messageText.product, ChatId, messageId, 'qiwi.com/n/CRITE671')
                    break
                case '249':
                    price(textPrice.price249, messageText.product, ChatId, messageId, 'qiwi.com/n/CRITE671')
                    break
                case '349':
                    price(textPrice.price349, messageText.product, ChatId, messageId, 'qiwi.com/n/CRITE671')
                    break
                case '599':
                    price(textPrice.price599, messageText.product, ChatId, messageId, 'qiwi.com/n/CRITE671')
                    break
                case '1499':
                    price(textPrice.price1499, messageText.product, ChatId, messageId, 'qiwi.com/n/CRITE671')
                    break
        
                case 'start':
                    bot.editMessageText(messageText.start, {
                        chat_id: ChatId,
                        message_id: messageId,
                        parse_mode: "HTML",
                    })
                    break
                
                case'purchases':
                    bot.answerCallbackQuery(query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫!")
                    break
            }

        } else {
            bot.sendMessage(ChatId, messageText.check, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: keyboard.check
                }
            })
    }
    
})

function price (title,text, chatid, msid, link, price) {
    bot.editMessageText(`${title}\n\n${text}`, {
        chat_id: chatid,
        message_id: msid,
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: `–û–ø–ª–∞—Ç–∏—Ç—å QIWI \ –ö–ê–†–¢–ê`,
                        callback_data: 'qiwi',
                        url: link
                    },
                ],
                [
                    {
                        text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        callback_data: 'start',
                    },
                ],
            ]
        }
    })
}

// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

adm.onText(/\/postphoto/, async msg => {

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendPhoto(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: '1',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })
                
    }

})


// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

adm.onText(/\/postvideo/, async msg => {

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendVideo(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: '1',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })
                
    }

})


// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

adm.onText(/\/posttext/, async msg => {
    
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(1).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendMessage(log[i].ChatId, sendText, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: '1',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })
                
    }

})

adm.onText(/\/namebutton/, async msg => {
    NameButton = msg.text.split(" ").slice(1,2).join(" ");
    
    const ChatId = msg.chat.id;

    adm.sendMessage(ChatId, `name button: ${NameButton}`, {
        parse_mode: 'HTML',
    })
    
})

adm.onText(/\/linkbutton/, async msg => {
    LinkButton = msg.text.split(" ").slice(1,2).join(" ");

    const ChatId = msg.chat.id;

    adm.sendMessage(ChatId, `link button: ${LinkButton}`, {
        parse_mode: 'HTML',
    })
})

adm.onText(/\/nbtnposttext/, async msg => {
    
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(1).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendMessage(log[i].ChatId, sendText, {
            parse_mode: 'HTML',
            
        })         
    }
})

adm.onText(/\/nbtnpostphoto/, async msg => {

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {      
        bot.sendPhoto(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
        })        
    }
})